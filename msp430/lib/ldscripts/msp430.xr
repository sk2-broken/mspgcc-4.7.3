/* Script for ld -r: link without relocation */
OUTPUT_FORMAT("elf32-msp430")
OUTPUT_ARCH("msp430")
SECTIONS
{
  /* Read-only sections, merged into text segment.  */
  .hash          0 : { *(.hash)          }
  .dynsym        0 : { *(.dynsym)        }
  .dynstr        0 : { *(.dynstr)        }
  .gnu.version   0 : { *(.gnu.version)   }
  .gnu.version_d 0 : { *(.gnu.version_d) }
  .gnu.version_r 0 : { *(.gnu.version_r) }
  .rel.init    0 : { *(.rel.init)  }
  .rela.init   0 : { *(.rela.init) }
  .rel.fini    0 : { *(.rel.fini)  }
  .rela.fini   0 : { *(.rela.fini) }
  .rel.text    0 : { *(.rel.text)        }
  .rela.text   0 : { *(.rela.text)     }
  .rel.rodata  0 : { *(.rel.rodata)    }
  .rela.rodata 0 : { *(.rela.rodata) }
  .rel.data    0 : { *(.rel.data)        }
  .rela.data   0 : { *(.rela.data)     }
  .rel.bss     0 : { *(.rel.bss)          }
  .rela.bss    0 : { *(.rela.bss)       }
  .rel.ctors   0 : { *(.rel.ctors)  }
  .rela.ctors  0 : { *(.rela.ctors) }
  .rel.dtors   0 : { *(.rel.dtors)  }
  .rela.dtors  0 : { *(.rela.dtors) }
  .rel.got     0 : { *(.rel.got)    }
  .rela.got    0 : { *(.rela.got)   }
  .rel.plt     0 : { *(.rel.plt)    }
  .rela.plt    0 : { *(.rela.plt)   }
  /* .any.{text,rodata,data,bss}{,.*} sections are treated as orphans and
   * placed in output sections with available space by linker.  Do not list
   * them here, or the linker will not consider them orphans. */
  .text :
  {
    *(.text)
    *(.near.text)
  }
  .rodata 0 :
  {
    *(.rodata)
    *(.near.rodata)
  }
   /* Past last read-only (loadable) segment */
  .data 0 :
  {
    *(.data)
    *(.near.data)
     /* Past last read-write (loadable) segment */
  }
  .bss 0 :
  {
    *(.bss)
    *(.near.bss)
    *(COMMON)
  }
  .noinit 0 :
  {
    *(.noinit)
  }
   /* Past last write (loadable) segment */
  .infomem 0 :
  {
    *(.infomem)
  }
  .infomemnobits 0 :
  {
    *(.infomemnobits)
  }
  .infoa 0 :
  {
    *(.infoa)
  }
  .infob 0 :
  {
    *(.infob)
  }
  .infoc 0 :
  {
    *(.infoc)
  }
  .infod 0 :
  {
    *(.infod)
  }
  /* Values placed in the first 32 entries of a 64-entry interrupt vector
   * table.  This exists because the FRAM chips place the BSL and JTAG
   * passwords at specific offsets that technically fall within the
   * interrupt table, but for which no MCU has a corresponding interrupt.
   * See https://sourceforge.net/tracker/?func=detail&aid=3554291&group_id=42303&atid=432701 */
  PROVIDE(__vte_0 = 0xffff);
  PROVIDE(__vte_1 = 0xffff);
  PROVIDE(__vte_2 = 0xffff);
  PROVIDE(__vte_3 = 0xffff);
  PROVIDE(__vte_4 = 0xffff);
  PROVIDE(__vte_5 = 0xffff);
  PROVIDE(__vte_6 = 0xffff);
  PROVIDE(__vte_7 = 0xffff);
  PROVIDE(__vte_8 = 0xffff);
  PROVIDE(__vte_9 = 0xffff);
  PROVIDE(__vte_10 = 0xffff);
  PROVIDE(__vte_11 = 0xffff);
  PROVIDE(__vte_12 = 0xffff);
  PROVIDE(__vte_13 = 0xffff);
  PROVIDE(__vte_14 = 0xffff);
  PROVIDE(__vte_15 = 0xffff);
  PROVIDE(__vte_16 = 0xffff);
  PROVIDE(__vte_17 = 0xffff);
  PROVIDE(__vte_18 = 0xffff);
  PROVIDE(__vte_19 = 0xffff);
  PROVIDE(__vte_20 = 0xffff);
  PROVIDE(__vte_21 = 0xffff);
  PROVIDE(__vte_22 = 0xffff);
  PROVIDE(__vte_23 = 0xffff);
  PROVIDE(__vte_24 = 0xffff);
  PROVIDE(__vte_25 = 0xffff);
  PROVIDE(__vte_26 = 0xffff);
  PROVIDE(__vte_27 = 0xffff);
  PROVIDE(__vte_28 = 0xffff);
  PROVIDE(__vte_29 = 0xffff);
  PROVIDE(__vte_30 = 0xffff);
  PROVIDE(__vte_31 = 0xffff);
  .vectors 0 :
  {
    KEEP(*(.vectors*))
  }
  /* Legacy section, prefer .far.text */
  .fartext 0 :
  {
    *(.fartext)
  }
  .far.text 0 :
  {
    *(.far.text)
  }
  .far.rodata 0 :
  {
    *(.far.rodata)
  }
   /* Past last read-only (loadable) segment */
  .far.data 0 :
  {
    *(.far.data)
     /* Past last read-write (loadable) segment */
  }
  .far.bss 0 :
  {
    *(.far.bss)
  }
   /* Past last write (loadable) segment */
  /* Stabs for profiling information*/
  .profiler 0 : { *(.profiler) }
  /* Stabs debugging sections.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  /* __stack is the only symbol that the user can override */
}
